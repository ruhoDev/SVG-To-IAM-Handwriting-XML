import pytest

from xml.etree import ElementTree

from svgoutline.xml_utils import read_xml_file

from svgoutline.svg_utils import (
    css_dimension_to_mm,
    get_svg_page_size,
    is_inkscape_layer,
    get_inkscape_layer_label,
    is_inkscape_layer_visible,
    set_svg_visibility,
    find_inkscape_layers,
)


class TestCssDimensionToMm(object):
    
    @pytest.mark.parametrize("ppmm", [96.0/25.4, 90.0/25.4])
    def test_mm_and_formatting(self, ppmm):
        # Integer and float support
        assert css_dimension_to_mm("123mm", ppmm) == 123
        assert css_dimension_to_mm("1.23mm", ppmm) == 1.23
        
        # With optional plus
        assert css_dimension_to_mm("+1mm", ppmm) == 1
        
        # With whitespace
        assert css_dimension_to_mm(" 1 mm ", ppmm) == 1
        assert css_dimension_to_mm(" + 1 mm ", ppmm) == 1
    
    @pytest.mark.parametrize("ppmm", [96.0/25.4, 90.0/25.4])
    def test_cm(self, ppmm):
        assert css_dimension_to_mm("1.2cm", ppmm) == 12.0
    
    @pytest.mark.parametrize("ppmm", [96.0/25.4, 90.0/25.4])
    def test_Q(self, ppmm):
        assert css_dimension_to_mm("1Q", ppmm) == 0.25
        assert css_dimension_to_mm("4Q", ppmm) == 1.0
    
    @pytest.mark.parametrize("ppmm", [96.0/25.4, 90.0/25.4])
    def test_inches(self, ppmm):
        assert css_dimension_to_mm("1in", ppmm) == 25.4
        assert css_dimension_to_mm("2in", ppmm) == 50.8
    
    @pytest.mark.parametrize("ppmm", [96.0/25.4, 90.0/25.4])
    def test_pica(self, ppmm):
        assert css_dimension_to_mm("6pc", ppmm) == css_dimension_to_mm("1in", ppmm)
    
    @pytest.mark.parametrize("ppmm", [96.0/25.4, 90.0/25.4])
    def test_point(self, ppmm):
        assert css_dimension_to_mm("72pt", ppmm) == css_dimension_to_mm("1in", ppmm)
    
    @pytest.mark.parametrize("ppmm", [96.0/25.4, 90.0/25.4])
    def test_pixels(self, ppmm):
        assert css_dimension_to_mm("1px", ppmm) == 1.0 / ppmm
        assert css_dimension_to_mm("1", ppmm) == 1.0 / ppmm
        
        assert css_dimension_to_mm("2px", ppmm) == 2.0 / ppmm
        assert css_dimension_to_mm("2", ppmm) == 2.0 / ppmm
    
    @pytest.mark.parametrize("ppmm", [96.0/25.4, 90.0/25.4])
    def test_unsupported_units(self, ppmm):
        # No font-relative sizes
        with pytest.raises(ValueError):
            css_dimension_to_mm("1em", ppmm)
        
        # No viewport-relative sizes
        with pytest.raises(ValueError):
            css_dimension_to_mm("1vw", ppmm)
        with pytest.raises(ValueError):
            css_dimension_to_mm("1%", ppmm)
    
    @pytest.mark.parametrize("ppmm", [96.0/25.4, 90.0/25.4])
    def test_negative(self, ppmm):
        with pytest.raises(ValueError):
            css_dimension_to_mm("-1mm", ppmm)
    
    @pytest.mark.parametrize("value", [
        # No number
        "",
        "mm",
        # Invalid/malformed number
        "1.2.3",  # >1 decimal
        "1,2mm",  # Comma
        "1 2mm",  # Space
        # Other content in string
        "foo 10 mm",
        "10 bar mm",
        "10 mm baz",
        # Multiple units
        "1 px mm",
        # Wrong case
        "1MM",
    ])
    @pytest.mark.parametrize("ppmm", [96.0/25.4, 90.0/25.4])
    def test_malformed(self, value, ppmm):
        with pytest.raises(ValueError):
            css_dimension_to_mm(value, ppmm)


class TestGetSvgPageSize(object):
    
    def test_minimal_svg(self, tmpdir):
        f = tmpdir.join("test.svg")
        f.write('<svg width="96" height="192" />')  # Pixels at 96 dpi
        assert get_svg_page_size(read_xml_file(str(f))) == (25.4, 50.8)
    
    def test_modern_inkscape_svg_pixels(self, tmpdir):
        f = tmpdir.join("test.svg")
        # An A4 empty SVG generated by Inkscape 0.92
        f.write("""<?xml version="1.0" encoding="UTF-8" standalone="no"?>
            <!-- Created with Inkscape (http://www.inkscape.org/) -->
            
            <svg
               xmlns:dc="http://purl.org/dc/elements/1.1/"
               xmlns:cc="http://creativecommons.org/ns#"
               xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
               xmlns:svg="http://www.w3.org/2000/svg"
               xmlns="http://www.w3.org/2000/svg"
               xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
               xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
               width="96"
               height="192"
               viewBox="0 0 25.4 50.800001"
               version="1.1"
               id="svg11896"
               inkscape:version="0.92.2 2405546, 2018-03-11"
               sodipodi:docname="pixels.svg">
              <defs
                 id="defs11890" />
              <sodipodi:namedview
                 id="base"
                 pagecolor="#ffffff"
                 bordercolor="#666666"
                 borderopacity="1.0"
                 inkscape:pageopacity="0.0"
                 inkscape:pageshadow="2"
                 inkscape:zoom="2.36"
                 inkscape:cx="50"
                 inkscape:cy="100"
                 inkscape:document-units="mm"
                 inkscape:current-layer="layer1"
                 showgrid="false"
                 units="px"
                 inkscape:window-width="956"
                 inkscape:window-height="1044"
                 inkscape:window-x="0"
                 inkscape:window-y="16"
                 inkscape:window-maximized="0" />
              <metadata
                 id="metadata11893">
                <rdf:RDF>
                  <cc:Work
                     rdf:about="">
                    <dc:format>image/svg+xml</dc:format>
                    <dc:type
                       rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
                    <dc:title></dc:title>
                  </cc:Work>
                </rdf:RDF>
              </metadata>
              <g
                 inkscape:label="Layer 1"
                 inkscape:groupmode="layer"
                 id="layer1"
                 transform="translate(0,-246.19999)" />
            </svg>
        """)
        # 1x2inches at 96 DPI
        assert get_svg_page_size(read_xml_file(str(f))) == (25.4, 50.8)
    
    def test_modern_inkscape_svg_mm(self, tmpdir):
        f = tmpdir.join("test.svg")
        # An A4 empty SVG generated by Inkscape 0.92
        f.write("""<?xml version="1.0" encoding="UTF-8" standalone="no"?>
            <!-- Created with Inkscape (http://www.inkscape.org/) -->
            
            <svg
               xmlns:dc="http://purl.org/dc/elements/1.1/"
               xmlns:cc="http://creativecommons.org/ns#"
               xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
               xmlns:svg="http://www.w3.org/2000/svg"
               xmlns="http://www.w3.org/2000/svg"
               xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
               xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
               width="210mm"
               height="297mm"
               viewBox="0 0 210 297"
               version="1.1"
               id="svg8"
               inkscape:version="0.92.2 2405546, 2018-03-11"
               sodipodi:docname="a4.svg">
              <defs
                 id="defs2" />
              <sodipodi:namedview
                 id="base"
                 pagecolor="#ffffff"
                 bordercolor="#666666"
                 borderopacity="1.0"
                 inkscape:pageopacity="0.0"
                 inkscape:pageshadow="2"
                 inkscape:zoom="1.1078846"
                 inkscape:cx="120.48603"
                 inkscape:cy="552.48047"
                 inkscape:document-units="mm"
                 inkscape:current-layer="layer1"
                 showgrid="false"
                 inkscape:window-width="956"
                 inkscape:window-height="1044"
                 inkscape:window-x="0"
                 inkscape:window-y="16"
                 inkscape:window-maximized="0" />
              <metadata
                 id="metadata5">
                <rdf:RDF>
                  <cc:Work
                     rdf:about="">
                    <dc:format>image/svg+xml</dc:format>
                    <dc:type
                       rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
                    <dc:title></dc:title>
                  </cc:Work>
                </rdf:RDF>
              </metadata>
              <g
                 inkscape:label="Layer 1"
                 inkscape:groupmode="layer"
                 id="layer1" />
            </svg>
        """)
        assert get_svg_page_size(read_xml_file(str(f))) == (210.0, 297.0)
    
    def test_legacy_inkscape_svg(self, tmpdir):
        f = tmpdir.join("test.svg")
        # An A4 empty SVG generated by Inkscape 0.46 (with width/height in 90
        # DPI pixels)
        f.write("""<?xml version="1.0" encoding="UTF-8" standalone="no"?>
            <!-- Created with Inkscape (http://www.inkscape.org/) -->
            <svg
               xmlns:dc="http://purl.org/dc/elements/1.1/"
               xmlns:cc="http://creativecommons.org/ns#"
               xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
               xmlns:svg="http://www.w3.org/2000/svg"
               xmlns="http://www.w3.org/2000/svg"
               xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
               xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
               width="744.09448819"
               height="1052.3622047"
               id="svg2"
               sodipodi:version="0.32"
               inkscape:version="0.46"
               sodipodi:docname="legacy.svg"
               inkscape:output_extension="org.inkscape.output.svg.inkscape">
              <defs
                 id="defs4">
                <inkscape:perspective
                   sodipodi:type="inkscape:persp3d"
                   inkscape:vp_x="0 : 526.18109 : 1"
                   inkscape:vp_y="0 : 1000 : 0"
                   inkscape:vp_z="744.09448 : 526.18109 : 1"
                   inkscape:persp3d-origin="372.04724 : 350.78739 : 1"
                   id="perspective10" />
              </defs>
              <sodipodi:namedview
                 id="base"
                 pagecolor="#ffffff"
                 bordercolor="#666666"
                 borderopacity="1.0"
                 gridtolerance="10000"
                 guidetolerance="10"
                 objecttolerance="10"
                 inkscape:pageopacity="0.0"
                 inkscape:pageshadow="2"
                 inkscape:zoom="2"
                 inkscape:cx="285.58936"
                 inkscape:cy="628.96054"
                 inkscape:document-units="px"
                 inkscape:current-layer="layer1"
                 showgrid="false"
                 showguides="true"
                 inkscape:guide-bbox="true" />
              <metadata
                 id="metadata7">
                <rdf:RDF>
                  <cc:Work
                     rdf:about="">
                    <dc:format>image/svg+xml</dc:format>
                    <dc:type
                       rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
                  </cc:Work>
                </rdf:RDF>
              </metadata>
              <g
                 inkscape:label="Layer 1"
                 inkscape:groupmode="layer"
                 id="layer1"></g>
            </svg>
        """)
        assert get_svg_page_size(read_xml_file(str(f))) == pytest.approx((210, 297))


def test_is_inkscape_layer():
    svg = ElementTree.fromstring("""<?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <svg
           xmlns="http://www.w3.org/2000/svg"
           xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape">
          <g
             inkscape:groupmode="layer"
             id="layer2"
             inkscape:label="Layer Name Here">
          </g>
          <g />
        </svg>
    """)
    
    assert is_inkscape_layer(svg) is False
    assert is_inkscape_layer(svg[0]) is True
    assert is_inkscape_layer(svg[1]) is False


def test_get_inkscape_layer_label():
    svg = ElementTree.fromstring("""<?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <svg
           xmlns="http://www.w3.org/2000/svg"
           xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape">
          <g
             inkscape:groupmode="layer"
             id="layer2"
             inkscape:label="Layer Name Here">
          </g>
        </svg>
    """)
    
    assert get_inkscape_layer_label(svg) is None
    assert get_inkscape_layer_label(svg[0]) == "Layer Name Here"


@pytest.mark.parametrize("xmlns_line", ["", 'xmlns="http://www.w3.org/2000/svg"'])
def test_is_inkscape_layer_visible(xmlns_line):
    svg = ElementTree.fromstring("""<?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <svg
           {}
           xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape">
          <g
             inkscape:groupmode="layer"
             id="layer2"
             inkscape:label="Layer 1">
          </g>
          <g
             inkscape:groupmode="layer"
             id="layer2"
             style="display:none"
             inkscape:label="Layer 2">
          </g>
          <g
             inkscape:groupmode="layer"
             id="layer2"
             style="foo : bar; display : none; baz: qux"
             inkscape:label="Layer 3">
          </g>
          <g
             inkscape:groupmode="layer"
             id="layer2"
             style="display:visible"
             inkscape:label="Layer 4">
          </g>
          <g
             inkscape:groupmode="layer"
             id="layer2"
             style="foo : bar; display : visible; baz: qux"
             inkscape:label="Layer 5">
          </g>
        </svg>
    """.format(xmlns_line))
    
    assert is_inkscape_layer_visible(svg[0]) is True
    assert is_inkscape_layer_visible(svg[1]) is False
    assert is_inkscape_layer_visible(svg[2]) is False
    assert is_inkscape_layer_visible(svg[3]) is True
    assert is_inkscape_layer_visible(svg[4]) is True


class TestSetSvgVisibility(object):
    
    @pytest.fixture
    def svg(self):
        return ElementTree.fromstring("""<?xml version="1.0" encoding="UTF-8" standalone="no"?>
            <svg
               xmlns="http://www.w3.org/2000/svg"
               xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape">
              <g
                 inkscape:groupmode="layer"
                 id="visible, no style"
                 inkscape:label="Layer 1">
              </g>
              <g
                 inkscape:groupmode="layer"
                 id="hidden, no style"
                 style="display:none"
                 inkscape:label="Layer 2">
              </g>
              <g
                 inkscape:groupmode="layer"
                 id="hidden, with style"
                 style="foo : bar; display : none; baz : qux"
                 inkscape:label="Layer 3">
              </g>
              <g
                 inkscape:groupmode="layer"
                 id="hidden, no style, collapsed whitespace"
                 style="display:visible"
                 inkscape:label="Layer 4">
              </g>
              <g
                 inkscape:groupmode="layer"
                 id="hidden, with style, collapsed whitespace"
                 style="foo:bar;display:visible;baz:qux"
                 inkscape:label="Layer 5">
              </g>
            </svg>
        """)
    
    def test_show(self, svg):
        set_svg_visibility(svg[0], True)
        assert "style" not in svg[0].attrib
        
        set_svg_visibility(svg[1], True)
        assert "style" not in svg[1].attrib
        
        set_svg_visibility(svg[2], True)
        assert sorted(map(str.strip, svg[2].attrib["style"].split(";"))) == [
            "baz : qux",
            "foo : bar",
        ]
        
        set_svg_visibility(svg[3], True)
        assert "style" not in svg[3].attrib
        
        set_svg_visibility(svg[4], True)
        assert sorted(map(str.strip, svg[4].attrib["style"].split(";"))) == [
            "baz:qux",
            "foo:bar",
        ]
    
    def test_hide(self, svg):
        set_svg_visibility(svg[0], False)
        assert svg[0].attrib["style"] == "display:none"
        
        set_svg_visibility(svg[1], False)
        assert svg[1].attrib["style"] == "display:none"
        
        set_svg_visibility(svg[2], False)
        assert sorted(map(str.strip, svg[2].attrib["style"].split(";"))) == [
            "baz : qux",
            "display:none",
            "foo : bar",
        ]
        
        set_svg_visibility(svg[3], False)
        assert svg[3].attrib["style"] == "display:none"
        
        set_svg_visibility(svg[4], False)
        assert sorted(map(str.strip, svg[4].attrib["style"].split(";"))) == [
            "baz:qux",
            "display:none",
            "foo:bar",
        ]


def test_find_inkscape_layers():
    svg = ElementTree.fromstring("""<?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <svg
           xmlns="http://www.w3.org/2000/svg"
           xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape">
          <g
             inkscape:groupmode="layer"
             id="layer2"
             inkscape:label="Layer B">
            <g
               inkscape:label="Layer B 2"
               id="g16397"
               inkscape:groupmode="layer">
            </g>
            <g
               inkscape:groupmode="layer"
               id="layer3"
               inkscape:label="Layer B 1">
            </g>
          </g>
          <g
             inkscape:label="Layer A"
             inkscape:groupmode="layer"
             id="layer1"
             style="display:inline">
          </g>
        </svg>
    """)
    
    out = find_inkscape_layers(svg)
    
    # All layers should be included and in order
    assert list(out.keys()) == [
        ("Layer A",),
        ("Layer B",),
        ("Layer B", "Layer B 1"),
        ("Layer B", "Layer B 2"),
    ]
    
    # Layers should point to correct part of SVG
    assert out[("Layer A", )] is svg[1]
    assert out[("Layer B", )] is svg[0]
    assert out[("Layer B", "Layer B 1")] is svg[0][1]
    assert out[("Layer B", "Layer B 2")] is svg[0][0]
